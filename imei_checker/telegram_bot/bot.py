import os
import sys
import django

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "imei_checker.settings")
django.setup()

import requests
import logging
from django.conf import settings
from telegram import Update
from telegram.ext import (Application, CommandHandler,
                          MessageHandler, filters, CallbackContext)
from api.models import AllowedUser
from asgiref.sync import sync_to_async

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

TELEGRAM_TOKEN = settings.TELEGRAM_BOT_TOKEN


def check_imei_api(imei):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç IMEI —á–µ—Ä–µ–∑ API."""
    url = settings.IMEI_API_URL
    headers = {
        "Authorization": f"Bearer {settings.API_AUTH_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {"deviceId": imei, "serviceId": 12}

    try:
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logging.error(f"IMEI check request failed: {e}")
        return {"error": "Service unavailable"}


@sync_to_async
def is_user_allowed(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return AllowedUser.objects.filter(user_id=user_id).exists()


async def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    user_id = update.effective_user.id
    if not await is_user_allowed(user_id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")


async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    if not await is_user_allowed(user_id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    imei = update.message.text.strip()
    if not imei.isdigit() or len(imei) not in [15, 17]:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IMEI.")
        return

    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é IMEI, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    data = check_imei_api(imei)
    if "error" in data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI.")
        return

    response_text = f"üì± IMEI: {imei}\n"
    if "properties" in data:
        props = data["properties"]

        response_text += (
            f"üìå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {props.get('deviceName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üîí SIM-–ª–æ–∫: {'–î–∞' if props.get('simLock', False) else '–ù–µ—Ç'}\n"
            f"üö® –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: "
            f"{'–î–∞' if props.get('gsmaBlacklisted', False) else '–ù–µ—Ç'}\n"
        )

    await update.message.reply_text(response_text)


def run_bot():
    """–ó–∞–ø—É—Å–∫"""
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")

    app.run_polling()


if __name__ == "__main__":
    run_bot()
